@page
@model DeckBuilderModel
@{
    Layout = "_LayoutWide";
    ViewData["Title"] = "Deck Builder";
}
<div style="display: flex;">
    <div class="tool-area">
        <fieldset>
            <legend>Stats</legend>
            <div><span class="info-stamp" title="The deck limit is 40 cards."></span> Total Cards: <span id="total-stat">0</span></div>
            <br />
            <div><span class="info-stamp" title="Only 1 Hero is allowed per deck."></span> Heroes: <span id="heroes-stat">0</span></span></div>
            <div><span class="info-stamp" title="Only 4 Landscapes are allowed per deck."></span> Landscapes: <span id="landscapes-stat">0</span></div>
            <div><span class="info-stamp" title="You can have as many creatures as you like."></span> Creatures: <span id="creature-stat">0</span></div>
            <div><span class="info-stamp" title="You can have as many spells as you like."></span> Spells: <span id="spell-stat">0</span></div>
            <div><span class="info-stamp" title="You can have as many buildings as you like."></span> Buildings: <span id="building-stat">0</span></div>
            <br />
            <div>Blue Plains: <span id="bp-stat">0</span></div>
            <div>Cornfields: <span id="cf-stat">0</span></div>
            <div>Useless Swamp: <span id="us-stat">0</span></div>
            <div>SandyLands: <span id="sl-stat">0</span></div>
            <div>NiceLands: <span id="nl-stat">0</span></div>
            <div>IcyLands: <span id="il-stat">0</span></div>
            <div>Rainbow: <span id="rb-stat">0</span></div>
        </fieldset>

        <fieldset id="actions">
            <legend>Actions</legend>
            <!--<button id="validateButton" type="button" class="btn btn-lg btn-block btn-primary">Validate</button>-->
            <button id="decklistExport" type="button" class="btn btn-lg btn-block btn-primary">Copy decklist to clipboard</button>
            <button id="permalinkExport" type="button" class="btn btn-lg btn-block btn-primary">Copy permalink to clipboard</button>
            <!--<button id="" type="button" class="btn btn-lg btn-block btn-primary">Data Dive</button>-->
        </fieldset>
    </div>
    <div class="deck-area">
        <h2>Hero</h2>
        <div id="deck-hero">
            @if (Model.QueryDeck != null)
            {
                @if (Model.QueryDeck.Hero != null)
                {
                    CardViewModel cvm = new CardViewModel() { Card = Model.QueryDeck.Hero, IsDeleteable = true };
                    <partial name="_Card" model="cvm" />
                }
            }
        </div>

        <h2>Landscapes</h2>
        <div id="deck-landscapes">
            @if (Model.QueryDeck != null)
            {
                @foreach (var landscape in Model.QueryDeck.Landscapes)
                {
                    CardViewModel cvm = new CardViewModel() { Card = landscape, IsDeleteable = true };
                    <partial name="_Card" model="cvm" />
                }
            }
        </div>

        <h2>Creatures, Spells, and Buildings</h2>
        <div id="deck-cards">
            @if (Model.QueryDeck != null)
            {
                @foreach (var card in Model.QueryDeck.Cards)
                {
                    CardViewModel cvm = new CardViewModel() { Card = card, IsDeleteable = true };
                    <partial name="_Card" model="cvm" />
                }
            }
        </div>
    </div>
    <div class="library-area">
        <fieldset id="filterBox">
            <legend>Filters</legend>
            <div class="filter-group">
                <label for="cardTypeFilter">Card Type: </label>
                <select id="cardTypeFilter">
                    <option value="">- None -</option>
                    <option value="@CardType.Creature">Creature</option>
                    <option value="@CardType.Spell">Spell</option>
                    <option value="@CardType.Building">Building</option>
                    <option value="@CardType.Hero">Hero</option>
                    <option value="@CardType.Landscape">Landscape</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="landscapeFilter">Landscape: </label>
                <select id="landscapeFilter">
                    <option value="">- None -</option>
                    <option value="@Landscape.BluePlains">Blue Plains</option>
                    <option value="@Landscape.CornFields">Cornfields</option>
                    <option value="@Landscape.UselessSwamp">Useless Swamp</option>
                    <option value="@Landscape.SandyLands">SandyLands</option>
                    <option value="@Landscape.NiceLands">NiceLands</option>
                    <option value="@Landscape.IcyLands">IcyLands</option>
                    <option value="@Landscape.Rainbow">Rainbow</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="nameFilter">Name: </label>
                <input type="text" id="nameFilter" />
            </div>
            <div class="filter-group">
                <label for="abilityFilter">Ability: </label>
                <input type="text" id="abilityFilter" />
            </div>
            <div class="filter-group">
                <label for="costFilter">Cost: </label>
                <input type="number" id="costFilter" />
            </div>
            <div class="filter-group">
                <label for="attackFilter">Attack: </label>
                <input type="number" id="attackFilter" />
            </div>
            <div class="filter-group">
                <label for="defenseFilter">Defense: </label>
                <input type="number" id="defenseFilter" />
            </div>
        </fieldset>
        <div style="display: flex; flex-wrap: wrap;">
            @foreach (var card in Model.Cards)
            {
                CardViewModel cvm = new CardViewModel() { Card = card, IsAddable = true };
                <partial name="_Card" model="cvm" />
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="./js/helpers.js"></script>
    <script src="./js/deckbuilder.rendering.js"></script>
    <script src="./js/deckbuilder.handlers.js"></script>

    <script>
        var filterFunctions = {
            cardType: '',
            landscape: '',
            attack: null,
            defense: null,
            cost: null,
            name: '',
            ability: ''
        };

        var deck = {
            hero: null,
            landscapes: [],
            cards: []
        };

        function filterDataset() {
            var elements = document.querySelectorAll('.card-container');
            for (var ele of elements) {
                var actions = [];
                if (filterFunctions.cardType !== "")
                    actions.push(ele.dataset.cardType === filterFunctions.cardType)
                if (filterFunctions.landscape !== "")
                    actions.push(ele.dataset.landscape === filterFunctions.landscape);
                if (filterFunctions.cost !== null)
                    actions.push(parseInt(ele.dataset.cost) === filterFunctions.cost);
                if (filterFunctions.attack !== null)
                    actions.push(parseInt(ele.dataset.attack) === filterFunctions.attack);
                if (filterFunctions.defense !== null)
                    actions.push(parseInt(ele.dataset.defense) === filterFunctions.defense);
                if (filterFunctions.name !== '')
                    actions.push(ele.dataset.name.indexOf(filterFunctions.name) > -1);
                if (filterFunctions.ability !== '')
                    actions.push(ele.dataset.ability.indexOf(filterFunctions.ability) > -1);

                if (actions.every(v => v)) {
                    ele.style.display = "inherit";
                } else {
                    ele.style.display = "none";
                }
            }
        }

        buildDeckIfExistsInQuery();
    </script>
}


<style>
    #actions .btn {
        margin-bottom: 5px;
    }
    .btn-block {
        width: 100%;
        display: block;
    }

    fieldset {
        padding: 10px;
        border: 1px solid lightgray;
        margin-bottom: 20px;
    }

    .info-stamp {
        background-image: url('./img/info.png');
        background-position: center;
        background-size: cover;
        width: 1em;
        height: 1em;
        display: inline-block;
    }

    #filterBox .filter-group {
        margin-bottom: 5px;
    }

    #filterBox label {
        width: 25%;
        text-align: right;
    }

    #filterBox input, #filterBox select {
        width: 70%;
    }

    .card:hover {
        transform: scale(2);
        transition: transform .2s;
        z-index: 1000;
        position: relative;
    }

    .card-overlay {
        display: none;
        position: absolute;
        bottom: 25%;
        width: 100%;
        text-align: center;
        
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-position: center;
        background-size: contain;
        height: 50px;
        width: 50px;
    }

    .deck-card {
        width: 128px;
    }

    .add {
        left: 0;
        right: 0;
        margin-left: auto;
        margin-right: auto;
        background-image: url('./img/add.png');
    }

    .remove {
        left: 0;
        right: 0;
        margin-left: auto;
        margin-right: auto;
        background-image: url('./img/remove.png');
    }

    .card:hover .card-overlay {
        display: block;
        z-index: 1001;
    }

    .deck-area {
        width: 50%;
        margin-right: 10px;
    }

    .library-area {
        width: 25%;
    }

    .tool-area {
        width: 25%;
        margin-right: 10px;
    }

    #deck-hero {
        min-height: 100px;
        background-color: lightgray;
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        padding: 5px;
    }

    #deck-landscapes {
        min-height: 100px;
        background-color: lightgray;
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        padding: 5px;
    }

    #deck-cards {
        min-height: 100px;
        background-color: lightgray;
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        padding: 5px;
    }
</style>
