// <auto-generated />
using System;
using CornDome.Repository.Tournaments;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CornDome.Repository.Migrations.Tournament
{
    [DbContext(typeof(TournamentContext))]
    [Migration("20251006150158_OpenListFlag")]
    partial class OpenListFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CornDome.Models.Tournaments.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Player1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Player2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("TournamentId");

                    b.ToTable("match");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("round");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpenList")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TournamentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TournamentDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TournamentName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tournament");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.TournamentRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Deck")
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("registration");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Match", b =>
                {
                    b.HasOne("CornDome.Models.Tournaments.Round", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CornDome.Models.Tournaments.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Round", b =>
                {
                    b.HasOne("CornDome.Models.Tournaments.Tournament", "Tournament")
                        .WithMany("Rounds")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.TournamentRegistration", b =>
                {
                    b.HasOne("CornDome.Models.Tournaments.Tournament", "Tournament")
                        .WithMany("Registrations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Round", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("CornDome.Models.Tournaments.Tournament", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
