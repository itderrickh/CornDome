@page
@using System.Text.Json
@model CornDome.Pages.GoldfishModel
@{
    ViewData["RenderMode"] = "wide";
}

@if (Model.QueryDeck.Landscapes.Count < 4)
{
    <span> Deck does not have required amount of landscapes</span>
}
else if (Model.QueryDeck.Cards.Count < 40)
{
    <span>Deck does not have enough cards</span>
}
else
{
    <div class="game-board">
        <div id="deck" class="deck">
            deck
        </div>
        <!--<div class="landscape drop-landscape" id="landscape1" data-landscape="landscape1" ondrop="dropHandler(event)" ondragover="event.preventDefault()">
            <div style="width: 100%;">
                <img class="card-image" alt="@Model.QueryDeck.Landscapes[0].Name" src="@("/CardImages/" + @Model.QueryDeck.Landscapes[0].ImageUrl)" />
            </div>
            <div class="card-drop">
            </div>
        </div>
        <div class="landscape drop-landscape" id="landscape2" data-landscape="landscape2" ondrop="dropHandler(event)" ondragover="event.preventDefault()">
            <div style="width: 100%;">
                <img class="card-image" alt="@Model.QueryDeck.Landscapes[1].Name" src="@("/CardImages/" + @Model.QueryDeck.Landscapes[1].ImageUrl)" />
            </div>
            <div class="card-drop">
            </div>
        </div>
        <div class="landscape drop-landscape" id="landscape3" data-landscape="landscape3" ondrop="dropHandler(event)" ondragover="event.preventDefault()">
            <div style="width: 100%;">
                <img class="card-image" alt="@Model.QueryDeck.Landscapes[2].Name" src="@("/CardImages/" + @Model.QueryDeck.Landscapes[2].ImageUrl)" />
            </div>
            <div class="card-drop">

            </div>
        </div>
        <div class="landscape drop-landscape" id="landscape4" data-landscape="landscape4" ondrop="dropHandler(event)" ondragover="event.preventDefault()">
            <div style="width: 100%;">
                <img class="card-image" alt="@Model.QueryDeck.Landscapes[3].Name" src="@("/CardImages/" + @Model.QueryDeck.Landscapes[3].ImageUrl)" />
            </div>
            <div class="card-drop">
            </div>
        </div>-->
        <cd-landscape id="landscape1" class="landscape drop-landscape" data-landscape="landscape1" alt-text="@Model.QueryDeck.Landscapes[0].Name" landscape-image="@("/CardImages/" + @Model.QueryDeck.Landscapes[0].ImageUrl)"></cd-landscape>
        <cd-landscape id="landscape2" class="landscape drop-landscape" data-landscape="landscape2" alt-text="@Model.QueryDeck.Landscapes[1].Name" landscape-image="@("/CardImages/" + @Model.QueryDeck.Landscapes[1].ImageUrl)"></cd-landscape>
        <cd-landscape id="landscape3" class="landscape drop-landscape" data-landscape="landscape3" alt-text="@Model.QueryDeck.Landscapes[2].Name" landscape-image="@("/CardImages/" + @Model.QueryDeck.Landscapes[2].ImageUrl)"></cd-landscape>
        <cd-landscape id="landscape4" class="landscape drop-landscape" data-landscape="landscape4" alt-text="@Model.QueryDeck.Landscapes[3].Name" landscape-image="@("/CardImages/" + @Model.QueryDeck.Landscapes[3].ImageUrl)"></cd-landscape>

        <div class="discard">
            discard
        </div>
    </div>
    <div id="hand" style="display: flex; flex-wrap: wrap;">
        
    </div>

    <context-menu target-class="card" id="cardMenu"></context-menu>
    <context-menu target-id="deck" id="deckMenu"></context-menu>
}

@section Styles {
    <style>
        .game-board {
            display: flex;
            justify-content: center;
            gap: 20px;
            width: 90%;
            max-width: 1000px;
            margin: 0 auto;
        }

        .deck, .discard {
            width: 300px;
            border: 1px solid white;
            border-radius: 3px;
        }

        .card-image {
            height: 100%;
            width: 100%;
        }

        .landscape {
            display: flex;
            flex: 1 1 auto;
        }

        .drop-landscape {
            position: relative;
        }

        .card-drop {
            position: absolute;
            margin-left: auto;
            margin-right: auto;
            left: 0;
            right: 0;
            text-align: center;
            top: 0;
            height: 60%;
            width: 60%;
        }

        #hand .card {
            width: 10%;
        }

        .flooped {
            transform: rotate(-0.25turn);
        }
    </style>
}

@section Scripts {
    <script src="~/js/goldfish/contextMenu.js"></script>
    <script src="~/js/goldfish/landscape.js"></script>

    <script>
        const cardMenu = document.getElementById('cardMenu');
        const deckMenu = document.getElementById('deckMenu');
        
    </script>
    <script>
        var deck = JSON.parse('@(Html.Raw(JsonSerializer.Serialize(Model.QueryDeck.Cards)))');
        var zones = {
            hand: document.getElementById('hand'),
            discard: document.getElementById('discard'),
            deck: document.getElementById('deck')
        };

        var applicationState = {
            hand: [],
            discard: [],
            deck: [],
            field: {
                spellZone: null,
                landscape1: {
                    card: {
                        flooped: false,
                        damage: 0,
                        data: null
                    },
                    building: {
                        flooped: false,
                        data: null
                    }
                },
                landscape2: {
                    card: {
                        flooped: false,
                        damage: 0,
                        data: null
                    },
                    building: {
                        flooped: false,
                        data: null
                    }
                },
                landscape3: {
                    card: {
                        flooped: false,
                        damage: 0,
                        data: null
                    },
                    building: {
                        flooped: false,
                        data: null
                    }
                },
                landscape4: {
                    card: {
                        flooped: false,
                        damage: 0,
                        data: null
                    },
                    building: {
                        flooped: false,
                        data: null
                    }
                }
            }
        };

        function render() {
            // hand
            zones.hand.innerHTML = "";
            for (let handCard of applicationState.hand) {
                let template = handCardTemplate(handCard, false);
                zones.hand.insertAdjacentHTML("beforeend", template);
            }

            var landscape1CardDrop = document.querySelector("#landscape1 .card-drop");
            var landscape2CardDrop = document.querySelector("#landscape2 .card-drop");
            var landscape3CardDrop = document.querySelector("#landscape3 .card-drop");
            var landscape4CardDrop = document.querySelector("#landscape4 .card-drop");

            if (applicationState.field.landscape1.card.data != null) {
                landscape1CardDrop.innerHTML = "";
                let template = handCardTemplate(applicationState.field.landscape1.card.data, applicationState.field.landscape1.card.flooped);
                landscape1CardDrop.insertAdjacentHTML("beforeend", template);
            }
            if (applicationState.field.landscape2.card.data != null) {
                landscape2CardDrop.innerHTML = "";
                let template = handCardTemplate(applicationState.field.landscape2.card.data, applicationState.field.landscape2.card.flooped);
                landscape2CardDrop.insertAdjacentHTML("beforeend", template);
            }
            if (applicationState.field.landscape3.card.data != null) {
                landscape3CardDrop.innerHTML = "";
                let template = handCardTemplate(applicationState.field.landscape3.card.data, applicationState.field.landscape3.card.flooped);
                landscape3CardDrop.insertAdjacentHTML("beforeend", template);
            }
            if (applicationState.field.landscape4.card.data != null) {
                landscape4CardDrop.innerHTML = "";
                let template = handCardTemplate(applicationState.field.landscape4.card.data, applicationState.field.landscape4.card.flooped);
                landscape4CardDrop.insertAdjacentHTML("beforeend", template);
            }
        }

        function drawCard() {
            if (applicationState.deck.length > 0)
                applicationState.hand.push(applicationState.deck.pop());
            render();
            handlers();
        }

        function shuffle(array) {
            let currentIndex = array.length;

            // While there remain elements to shuffle...
            while (currentIndex != 0) {

                // Pick a remaining element...
                let randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex--;

                // And swap it with the current element.
                [array[currentIndex], array[randomIndex]] = [
                    array[randomIndex], array[currentIndex]];
            }
        }

        function handlers() {
            const elements = document.querySelectorAll(".card");

            for (let handCard of elements) {
                handCard.removeEventListener("dragstart", dragstartHandler);
                handCard.addEventListener("dragstart", dragstartHandler);
            }

            elements.forEach((card) => {
                card.addEventListener('contextmenu', (event) => {
                    event.preventDefault();  // Disable default browser context menu
                    cardMenu.showMenu(event.pageX, event.pageY);
                });
            });

            // Context Menus
            const cardMenuItems = [
                { label: 'Floop', action: null },
                { label: 'Discard', action: null },
                { label: 'Activate', action: null }
            ];
            cardMenu.setMenuItems(cardMenuItems);
            const deckMenuItems = [
                { label: 'Draw', action: drawCard },
                { label: 'Shuffle', action: null }
            ];
            deckMenu.setMenuItems(deckMenuItems);

            zones.deck.addEventListener('contextmenu', (event) => {
                event.preventDefault();
                deckMenu.showMenu(event.pageX, event.pageY);
            });
        }

        function handCardTemplate(card, flooped) {
            var data = encodeURIComponent(JSON.stringify(card));
            var floopClass = flooped ? 'flooped' : '';
            return `
                <div draggable="true"
                    class="card ${floopClass}"
                    data-id="${card.id}"
                    data-card="${data}">
                            <img class="deck-card-image" alt="${card.name}" style = "width: 100%;" src="/CardImages/${card.imageurl}" />
                 </div>
            `;
        }

        function dragstartHandler(ev) {
            // Add the target element's id to the data transfer object
            ev.dataTransfer.setData("text/plain", ev.target.parentElement.dataset.card);
        }

        document.addEventListener('landscape-card-drop', (event) => {
            const cardData = event.detail.cardData;
            var locationInHand = applicationState.hand.map(function (x) { return x.id; }).indexOf(cardData['id']);
            applicationState.hand.splice(locationInHand, 1);
            render();
            handlers();
        });

        window.addEventListener("DOMContentLoaded", () => {
            applicationState.deck = deck;

            shuffle(applicationState.deck);
            for (var i = 0; i < 5; i++) {
                applicationState.hand.push(applicationState.deck.pop());
            }

            render();
            handlers();
        });
    </script>
}