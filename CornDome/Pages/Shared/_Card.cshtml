@model Models.CardViewModel

@{
    var cardImage = Model.Card.LatestRevision.GetRegularImage;

    if (Model.CardImageType == CardImageTypeEnum.XSmall)
        cardImage = Model.Card.LatestRevision.GetExtraSmallImage;
    else if (Model.CardImageType == CardImageTypeEnum.Small)
        cardImage = Model.Card.LatestRevision.GetSmallImage;
    else if (Model.CardImageType == CardImageTypeEnum.Large)
        cardImage = Model.Card.LatestRevision.GetLargeImage;
}

<div style="width: 120px;"
     class="card-container"
     data-id="@Model.Card.Id"
     data-card-image="@("/CardImages/" + cardImage)"
     data-card-type="@Model.Card.LatestRevision.TypeId"
     data-landscape="@(Model.Card.LatestRevision.LandscapeId)"
     data-name="@Model.Card.LatestRevision.Name"
     data-ability="@Model.Card.LatestRevision.Ability"
     data-cost="@(Model.Card.LatestRevision.Cost.HasValue ? Model.Card.LatestRevision.Cost.ToString() : "")"
     data-set="@(Model.Card.LatestRevision.SetId)"
     data-attack="@(Model.Card.LatestRevision.Attack.HasValue ? Model.Card.LatestRevision.Attack.ToString() : "")"
     data-defense="@(Model.Card.LatestRevision.Defense.HasValue ? Model.Card.LatestRevision.Defense.ToString() : "")">
    <div class="card">
        <img src="@("/CardImages/" + cardImage)" alt="@Model.Card.LatestRevision.Name" style="width: 100%;" />
        @if (Model.IsAddable)
        {
            <div class="card-overlay add"></div>
        }
        @if (Model.IsDeleteable)
        {
            <div class="card-overlay remove"></div>
        }
    </div>
</div>